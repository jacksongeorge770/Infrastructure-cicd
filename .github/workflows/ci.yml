name: Terraform Manual Trigger

on:
  workflow_dispatch:

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ca-central-1

      - name: Ensure Backend Exists (S3 + DynamoDB)
        run: |
          aws s3api create-bucket \
            --bucket jackson-terraform-ca-central1 \
            --region ca-central-1 \
            --create-bucket-configuration LocationConstraint=ca-central-1 || true

          aws dynamodb create-table \
            --table-name terraform-locks \
            --attribute-definitions AttributeName=LockID,AttributeType=S \
            --key-schema AttributeName=LockID,KeyType=HASH \
            --billing-mode PAY_PER_REQUEST \
            --region ca-central-1 || true

          aws dynamodb wait table-exists --table-name terraform-locks

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan
        env:
          TF_VAR_ami_id: ${{ secrets.AMI_ID }}
          TF_VAR_jenkins_admin_password: ${{ secrets.JENKINS_ADMIN_PASSWORD }}
          TF_VAR_github_token: ${{ secrets.TOKEN }}
          TF_VAR_dockerhub_username: ${{ secrets.DOCKERHUB_USERNAME }}
          TF_VAR_dockerhub_password: ${{ secrets.DOCKERHUB_PASSWORD }}
          TF_VAR_github_repository: ${{ secrets.GIT_NAME }}

      - name: Terraform Apply
        run: terraform apply -auto-approve
        env:
          TF_VAR_ami_id: ${{ secrets.AMI_ID }}
          TF_VAR_jenkins_admin_password: ${{ secrets.JENKINS_ADMIN_PASSWORD }}
          TF_VAR_github_token: ${{ secrets.TOKEN }}
          TF_VAR_dockerhub_username: ${{ secrets.DOCKERHUB_USERNAME }}
          TF_VAR_dockerhub_password: ${{ secrets.DOCKERHUB_PASSWORD }}
          TF_VAR_github_repository: ${{ secrets.GIT_NAME }}

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" | tr -d '\r' > ~/.ssh/cicd.pem
          chmod 400 ~/.ssh/cicd.pem

      - name: Get Jenkins Public IP from Terraform output
        id: get_ip
        run: echo "::set-output name=jenkins_ip::$(terraform output -raw jenkins_public_ip)"

      - name: Fetch Jenkins Admin Password
        id: get_password
        run: |
          PASSWORD=$(ssh -o StrictHostKeyChecking=no -i ~/.ssh/cicd.pem ubuntu@${{ steps.get_ip.outputs.jenkins_ip }} "sudo cat /var/lib/jenkins/secrets/initialAdminPassword")
          echo "Jenkins Admin Password: $PASSWORD"
          echo "::set-output name=jenkins_password::$PASSWORD"

      - name: Use Jenkins Password
        run: echo "Jenkins password is ${{ steps.get_password.outputs.jenkins_password }}"

      - name: Connect to EC2 via SSH and run command
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          HOSTNAME: ${{ steps.get_ip.outputs.jenkins_ip }}
          USER_NAME: ubuntu
        run: |
          echo "$PRIVATE_KEY" > private_key
          chmod 600 private_key

          ssh -o StrictHostKeyChecking=no -i private_key $USER_NAME@$HOSTNAME "
            echo 'âœ… SSH connection successful!'
            # Run your remote commands here
            uptime
          "
